#!/usr/bin/env python
import os, argparse
import numpy as np
import matplotlib.pyplot as plt

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Plot Molecular Dynamics Curves")
    parser.add_argument("-t", "--task", type=str, help="set which task type you want to execute")
    parser.add_argument("-f", "--file", type=str, default="data.xvg", help="need an .xvg file path")
    parser.add_argument("-i", "--pdb-id", type=str, help="PDB ID (used in axis title)")
    args = parser.parse_args()

    params = {'mathtext.default': 'regular'}
    plt.rcParams.update(params)

    if args.task == "em_potential":
        x, y = np.loadtxt(args.file, comments=['#', '@'], unpack=True)
        s = np.arange(len(y))
        fig, ax = plt.subplots()
        fig.suptitle(args.pdb_id.upper() + ", Energy Minimization")
        ax.plot(s, y, label="System")
        ax.set_title("Potential Energy", fontsize=10)
        ax.set_xlabel("Step")
        ax.set_ylabel("$E_{pot}$ (kJ/mol)")
        ax.legend()
        fig.savefig(os.path.splitext(args.file)[0] + ".png", dpi=500, bbox_inches='tight')
    elif args.task == "nvt_temperature":
        x, y = np.loadtxt(args.file, comments=['#', '@'], unpack=True)
        fig, ax = plt.subplots()
        fig.suptitle(args.pdb_id.upper() + ", NVT Equilibration")
        ax.plot(x, y, label="System")
        ax.set_title("Temperature", fontsize=10)
        ax.set_xlabel("Time (ps)")
        ax.set_ylabel("T (K)")
        ax.legend()
        fig.savefig(os.path.splitext(args.file)[0] + ".png", dpi=500, bbox_inches='tight')
    elif args.task == "npt_pressure":
        x, y = np.loadtxt(args.file, comments=['#', '@'], unpack=True)
        fig, ax = plt.subplots()
        fig.suptitle(args.pdb_id.upper() + ", NPT Equilibration")
        ax.plot(x, y, label="System")
        ax.set_title("Pressure", fontsize=10)
        ax.set_xlabel("Time (ps)")
        ax.set_ylabel("P (bar)")
        ax.legend()
        fig.savefig(os.path.splitext(args.file)[0] + ".png", dpi=500, bbox_inches='tight')
    elif args.task == "npt_density":
        x, y = np.loadtxt(args.file, comments=['#', '@'], unpack=True)
        fig, ax = plt.subplots()
        fig.suptitle(args.pdb_id.upper() + ", NPT Equilibration")
        ax.plot(x, y, label="System")
        ax.set_title("Density", fontsize=10)
        ax.set_xlabel("Time (ps)")
        ax.set_ylabel(r"$\rho$ (kg/m$^3$)")
        ax.legend()
        fig.savefig(os.path.splitext(args.file)[0] + ".png", dpi=500, bbox_inches='tight')
    elif args.task == "md_potential":
        x, y = np.loadtxt(args.file, comments=['#', '@'], unpack=True)
        fig, ax = plt.subplots()
        fig.suptitle(args.pdb_id.upper() + ", Production MD")
        ax.plot(x, y, label="System")
        ax.set_title("Potential Energy", fontsize=10)
        ax.set_xlabel("Time (ps)")
        ax.set_ylabel("$E_{pot}$ (kJ/mol)")
        ax.legend()
        fig.savefig(os.path.splitext(args.file)[0] + ".png", dpi=500, bbox_inches='tight')
    elif args.task == "md_rmsd":
        x, y = np.loadtxt(args.file, comments=['#', '@'], unpack=True)
        fig, ax = plt.subplots()
        fig.suptitle(args.pdb_id.upper() + ", Production MD")
        ax.plot(x, y, label="Backbone")
        ax.set_title("Root Mean Square Distance", fontsize=10)
        ax.set_xlabel("Time (ps)")
        ax.set_ylabel("RMSD (nm)")
        ax.legend()
        fig.savefig(os.path.splitext(args.file)[0] + ".png", dpi=500, bbox_inches='tight')
    elif args.task == "md_gyration":
        x, y, _, _, _ = np.loadtxt(args.file, comments=['#', '@'], unpack=True)
        fig, ax = plt.subplots()
        fig.suptitle(args.pdb_id.upper() + ", Production MD")
        ax.plot(x, y, label="Protein")
        ax.set_title("Radius of Gyration", fontsize=10)
        ax.set_xlabel("Time (ps)")
        ax.set_ylabel("$R_g$ (nm)")
        ax.legend()
        fig.savefig(os.path.splitext(args.file)[0] + ".png", dpi=500, bbox_inches='tight')
    else:
        print("Task Not Supported.")

